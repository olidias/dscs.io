---
import Logo from '~/components/Logo.astro';
import ToggleTheme from '~/components/common/ToggleTheme.astro';
import ToggleMenu from '~/components/common/ToggleMenu.astro';

import { getHomePermalink, getAsset } from '~/utils/permalinks';
import { getLangFromUrl, useTranslations } from '~/i18n/utils';
import type { ui } from '~/i18n/ui';
import LanguagePicker from '../LanguagePicker';

interface Link {
  textKey?: Partial<typeof ui>;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}


interface MenuLink extends Link {
  links?: Array<Link>;
}

export interface Props {
  links?: Array<MenuLink>;
  isSticky?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
}

const {
  isSticky = false,
  showToggleTheme = false,
  position = 'center',
} = Astro.props;

const links = [
    {
      textKey: 'header.useCases',
      href: '#use-cases',
    },
    {
      textKey: 'header.procedure',
      href: '#procedure'
    },
    {
      textKey: 'header.tools',
      href: '#tools'
    },
    {
      textKey: 'header.about',
      href: '#about'
    },
    {
      textKey: 'header.contact',
      href: '#contact'
    },
  ];
;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<header
  class:list={[
    { sticky: isSticky, relative: !isSticky },
    'top-0 z-40 flex-none mx-auto w-full transition-all ease-in duration-100',
  ]}
  id="header"
>
  <div class="py-3 px-3 md:py-3.5 md:px-4 mx-auto w-full md:flex md:justify-between max-w-7xl">
    <div class:list={[{"mr-auto": position === "right"}, "flex justify-between"]}>
      <a class="flex items-center" href={getHomePermalink()}>
        <Logo />
      </a>
      <div class="flex items-center md:hidden">
        {<LanguagePicker url={Astro.url} client:visible/>}
        {showToggleTheme && <ToggleTheme />}
        <ToggleMenu />
      </div>
    </div>
    <nav
      class="items-center w-full md:w-auto hidden md:flex dark:text-slate-200 h-[calc(100vh-72px)] md:h-auto overflow-y-auto md:overflow-visible md:mx-5"
      aria-label="Main navigation"
    >
      <ul class="flex flex-col pt-8 md:pt-0 md:flex-row md:self-center w-full md:w-auto text-xl md:text-base">
        {
          links.map(({ textKey, href }) => (
            <li >
                <a
                  class="font-medium hover:text-gray-900 dark:hover:text-white px-4 py-3 flex items-center transition duration-150 ease-in-out"
                  href={href}
                >
                  {t(textKey)}
                </a>
              
            </li>
          ))
        }
      </ul>
    </nav>
    <div class:list={[{ 'ml-auto': position === 'left' }, 'md:self-center flex items-center md:mb-0']}>
      <div class="hidden items-center md:flex">
        {<LanguagePicker url={Astro.url} client:visible/>}
        {showToggleTheme && <ToggleTheme iconClass="w-5 h-5" />}
      </div>
    </div>
  </div>
</header>
<!-- 
<script>
  const dropdowns = document.querySelectorAll("#languageDropdown");
  const buttons = document.querySelectorAll('#languageDropdownButton');
  buttons.forEach(b => b.addEventListener('click', () => {
    dropdowns.forEach(dd => dd?.classList.contains('hidden') ? dd?.classList.remove('hidden') : dd?.classList.add('hidden'));
    hideOnClickOutside(dropdowns, buttons);
  }));
  
  function hideOnClickOutside(dropdownElement, buttonElement) {
      const outsideClickListener = event => {
          if (!dropdownElement.contains(event.target) && isVisible(dropdownElement) && !buttonElement.contains(event.target) && isVisible(buttonElement)) { // or use: event.target.closest(selector) === null
            dropdowns.forEach(dd => dd?.classList.contains('hidden') ? dd?.classList.remove('hidden') : dd?.classList.add('hidden'));
            removeClickListener();
          }
      }
  
      const removeClickListener = () => {
          document.removeEventListener('click', outsideClickListener);
      }
  
      document.addEventListener('click', outsideClickListener);
  }
  
  const isVisible = elem => !!elem && !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length ); // source (2018-03-11): https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js 
  
  </script> -->