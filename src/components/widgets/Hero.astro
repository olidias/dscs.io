---
import { Icon } from 'astro-icon';

export interface Props {
  title?: string;
  subtitle?: string;
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  content = await Astro.slots.render('content'),
  callToAction = await Astro.slots.render('callToAction'),
  callToAction2 = await Astro.slots.render('callToAction2'),
  image = await Astro.slots.render('image'),
} = Astro.props;
---


<div class="-z-40 absolute">
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 320" class="w-screen mt-[calc(3vh)] md:mt-[calc(8vh)] lg:[calc(9vh)]">
    <linearGradient id="OpacityGradient" x1="0" x2="0" y1="0" y2="1">
      <stop offset="0%" stop-opacity="0.5" stop-color="#0099ff" />
      <stop offset="100%" stop-opacity="1" stop-color="#0099ff" />
    </linearGradient>
    <path fill="url(#OpacityGradient)" fill-opacity="0.8" d="M0,128L60,160C120,192,240,256,360,277.3C480,299,600,277,720,250.7C840,224,960,192,1080,197.3C1200,203,1320,245,1380,266.7L1440,288L1440,0L1380,0C1320,0,1200,0,1080,0C960,0,840,0,720,0C600,0,480,0,360,0C240,0,120,0,60,0L0,0Z"></path>
  </svg>
  <!-- <svg xmlns="http://www.w3.org/2000/svg" class="w-screen mt-20"
  viewBox="0 0 1440 320"><path fill="#0099ff" fill-opacity="0.8" d="M0,128L60,160C120,192,240,256,360,277.3C480,299,600,277,720,250.7C840,224,960,192,1080,197.3C1200,203,1320,245,1380,266.7L1440,288L1440,320L1380,320C1320,320,1200,320,1080,320C960,320,840,320,720,320C600,320,480,320,360,320C240,320,120,320,60,320L0,320Z"></path></svg> -->
</div>
<section class="relative md:-mt-[76px]">
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true"></div>
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6">
    <div class="pt-0 md:pt-[76px] pointer-events-none"></div>
    <div class="py-12 md:py-20">
      <div class="text-center pb-10 md:pb-16 max-w-screen-lg mx-auto">
        {
          title && (
            <h1
              class="text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading dark:text-gray-200"
              set:html={title}
            />
          )
        }
        <div class="max-w-3xl mx-auto">
          {subtitle && <p class="text-xl text-muted mb-6 dark:text-slate-300" set:html={subtitle} />}
          <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4">
            {
              callToAction && (
                <div class="flex w-full sm:w-auto">
                  {typeof callToAction === 'string' ? (
                    <Fragment set:html={callToAction} />
                  ) : (
                    <a class="btn btn-primary sm:mb-0 w-full" href={callToAction?.href} target="_blank" rel="noopener">
                      {callToAction?.icon && (
                        <>
                          <Icon name={callToAction.icon} class="w-5 h-5 mr-1 -ml-1.5" />{' '}
                        </>
                      )}
                      {callToAction?.text}
                    </a>
                  )}
                </div>
              )
            }
            {
              callToAction2 && (
                <div class="flex w-full sm:w-auto">
                  {typeof callToAction2 === 'string' ? (
                    <Fragment set:html={callToAction2} />
                  ) : (
                    <a class="btn w-full" href={callToAction2?.href}>
                      {callToAction2?.icon && (
                        <>
                          <Icon name={callToAction2.icon} class="w-5 h-5 mr-1 -ml-1.5" />{' '}
                        </>
                      )}
                      {callToAction2.text}
                    </a>
                  )}
                </div>
              )
            }
          </div>
        </div>
        
        {content && <Fragment set:html={content} />}
      </div>
    </div>
  </div>
</section>
